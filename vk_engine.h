// vulkan_guide.h : Include file for standard system include files,
// or project specific include files.

#pragma once

#include <vk_types.h>
#include <vector>

class VulkanEngine {
public:
	VkSemaphore _present_semaphore, _render_semaphore;
	VkFence _render_fence;

	// Setup the low level stuff
	VkInstance _instance; // Vulkan Library Handle
	VkDebugUtilsMessengerEXT _debug_messenger; // Vulkan debug output handle
	VkPhysicalDevice _chosen_GPU; // "The chosen one- i mean GPU."
	VkDevice _device; // basically a handle to interact with the the GPU driver
	VkSurfaceKHR _surface; // the window's surface

	// Setup the swapchain
	VkSwapchainKHR _swapchain; // make a swapchain
	VkFormat _swapchain_image_format; // image format being used by the platform
	std::vector<VkImage> _swapchain_images; // images generated by the swapchain
	std::vector<VkImageView> _swapchain_image_views; // image-views generated by the swapchain

	// CommandBuffer
	VkCommandPool _commandPool; // You need a commandPool to record all the commands to
	VkCommandBuffer _mainCommandBuffer; // CommandBuffer to record the commands
	VkQueue _graphicsQueue; // graphicsqueue to supply those commands to the GPU
	uint32_t _graphicsQueueFamily; // specify the family of the queue

	// RenderPass
	VkRenderPass _renderpass; // you need a renderpass to display images from the commandbuffer
	std::vector<VkFramebuffer> _frameBuffers; // all the framebuffers that need to be rendered to the screen

	// Pipeline
	VkPipelineLayout _trianglePipelineLayout;
	VkPipeline _trianglePipeline;

	bool _isInitialized{ false };
	int _frameNumber {0};

	VkExtent2D _windowExtent{ 1700 , 900 };

	struct SDL_Window* _window{ nullptr };

	//initializes everything in the engine
	void init();

	//shuts down the engine
	void cleanup();

	//draw loop
	void draw();

	//run main loop
	void run();

private:
	// Init low level vulkan stuff
	void init_vulkan();

	// Init the swapchain
	void init_swapchain();

	// Init the commandbuffer
	void init_commands();

	// Init the default renderpass
	void init_default_renderpass();

	// Init the framebuffers
	void init_framebuffers();

	// Init sync structures
	void init_sync_structures();

	// Init vulkan pipelines
	void init_pipelines();

	bool load_shader_module(const char* filepath, VkShaderModule* outshaderModule);
};

struct PipelineBuilder {
	std::vector<VkPipelineShaderStageCreateInfo> _shaderStages;
	VkPipelineVertexInputStateCreateInfo _vertexInputInfo;
	VkPipelineInputAssemblyStateCreateInfo _inputAssembly;
	VkViewport _viewport;
	VkRect2D _scissor;
	VkPipelineRasterizationStateCreateInfo _rasterizer;
	VkPipelineColorBlendAttachmentState _colorBlendAttachment;
	VkPipelineMultisampleStateCreateInfo _multisampling;
	VkPipelineLayout _pipelineLayout;

	VkPipeline build_pipeline(VkDevice device, VkRenderPass pass);

};